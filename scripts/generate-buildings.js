// Node script to generate a buildings list from assets/bygninger
// Usage: node scripts/generate-buildings.js
const fs = require('fs');
const path = require('path');

const ASSETS_DIR = path.join(__dirname, '..', 'assets', 'bygninger');
const OUT_FILE = path.join(__dirname, '..', 'components', 'buildings.generated.js');

function toDisplayName(filename) {
  // Strip extension, replace separators with spaces, basic title casing
  const base = filename.replace(/\.svg$/i, '');
  // Split on dash, underscore, or dot to avoid tokens like "1."
  const parts = base
    .split(/[\._-]+/)
    .map(p => p.trim())
    .filter(Boolean);
  const name = parts
    .map(p => p.charAt(0).toUpperCase() + p.slice(1))
    .join(' ');
  return name || filename;
}

function generate() {
  const files = fs.readdirSync(ASSETS_DIR).filter(f => f.toLowerCase().endsWith('.svg'));
  const items = files.map((f) => ({ id: f.replace(/\.svg$/i, ''), name: toDisplayName(f), rel: `../assets/bygninger/${f}` }));

  const lines = [];
  lines.push('// AUTO-GENERATED FILE. Do not edit by hand.');
  lines.push('// Generated by scripts/generate-buildings.js');
  lines.push('export const BUILDINGS = [');
  for (const it of items) {
    lines.push(`  { id: ${JSON.stringify(it.id)}, name: ${JSON.stringify(it.name)}, svg: require(${JSON.stringify(it.rel)}) },`);
  }
  lines.push('];');
  lines.push('export default BUILDINGS;');

  fs.writeFileSync(OUT_FILE, lines.join('\n'), 'utf8');
  console.log(`Generated ${OUT_FILE} with ${items.length} building(s).`);
}

function run() {
  const watching = process.argv.includes('--watch');
  generate();
  if (watching) {
    console.log(`Watching ${ASSETS_DIR} for changes...`);
    let debounced = null;
    fs.watch(ASSETS_DIR, { persistent: true }, () => {
      clearTimeout(debounced);
      debounced = setTimeout(() => {
        try { generate(); } catch (e) { console.error('Regenerate failed:', e.message); }
      }, 200);
    });
  }
}

run();
